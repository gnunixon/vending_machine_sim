// Generated by CoffeeScript 1.10.0
var BaseManager, Buyer, VendingMachine, base;

BaseManager = (function() {
  function BaseManager() {
    this.get_vm(1);
    this.get_buyer(1);
  }

  BaseManager.prototype.ask = function(method, url) {
    var xhr;
    xhr = new XMLHttpRequest;
    xhr.open(method, url, false);
    xhr.send();
    if (xhr.status === 200) {
      return JSON.parse(xhr.responseText);
    }
  };

  BaseManager.prototype.get_vm = function(vm_id) {
    var data;
    data = this.ask('GET', '/vms/' + vm_id);
    if (data.success) {
      this.vm = new VendingMachine(data.data);
      this.vm.render();
    }
  };

  BaseManager.prototype.get_buyer = function(buyer_id) {
    var data;
    data = this.ask('GET', '/buyer/' + buyer_id);
    if (data.success) {
      this.buyer = new Buyer(data.data);
      this.buyer.render();
    }
  };

  return BaseManager;

})();

VendingMachine = (function() {
  function VendingMachine(data) {
    this.id = data.id;
    this.coins = data.coins;
    this.goods = data.goods;
    this.buffer = data.buffer;
  }

  VendingMachine.prototype.render = function() {
    var content, good, goods, i, len, template, vm;
    template = '<h1>Vending Machine {{ vm.id }}</h1> <div class="coins col-md-12"> {% for coin in vm.coins %} <button class="btn-warning coin" data-value="{{ coin.nominal }}" data-amount="{{ coin.amount }}"> <span class="glyphicon glyphicon-rub"></span> {{ coin.nominal }} X {{ coin.amount }} </button> {% endfor %} </div> <div class="goods col-md-12 thumbnail"> {% for good in vm.goods %} <button class="good col-md-2" data-value="{{ good.name }}" data-price="{{ good.price }}" data-amount="{{ good.amount }}" data-id="{{ good.id }}"> <h4>{{ good.name }}</h4> <h3>{{ good.amount }}</h3> <h4><span class="glyphicon glyphicon-rub"></span> {{ good.price }}</h4> </button> {% endfor %} </div> <div class="buffer thumbnail col-md-6" data-amount="{{ vm.buffer }}"> {{ vm.buffer }} </div> <button class="return btn-danger"><span class="glyphicon glyphicon-repeat"></span></button> <div id="message" class="col-md-12"></div>';
    this.preview = document.getElementById('vm');
    content = swig.render(template, {
      locals: {
        vm: this
      }
    });
    this.preview.innerHTML = content;
    vm = this;
    goods = this.preview.querySelectorAll('.good');
    for (i = 0, len = goods.length; i < len; i++) {
      good = goods[i];
      good.addEventListener('click', function() {
        var data;
        data = base.ask('PUT', '/vms/' + vm.id + '/pay/' + this.dataset.id);
        if (data.success) {
          base.get_vm(vm.id);
        }
        return vm.preview.querySelector('#message').innerHTML = data.message;
      });
    }
    return this.preview.querySelector('.return').addEventListener('click', function() {
      var success;
      success = base.ask('PUT', '/vms/' + vm.id + '/buyer/' + base.buyer.id + '/return');
      if (success) {
        base.get_vm(vm.id);
        return base.get_buyer(base.buyer.id);
      }
    });
  };

  return VendingMachine;

})();

Buyer = (function() {
  function Buyer(data) {
    this.id = data.id;
    this.coins = data.coins;
  }

  Buyer.prototype.render = function() {
    var coin, coins, content, i, len, results, template;
    template = '<h1>Your pocket</h1> <div class="coins"> {% for coin in buyer.coins %} <button class="btn-warning coin" data-value="{{ coin.nominal }}" data-amount="{{ coin.amount }}"> <span class="glyphicon glyphicon-rub"></span> {{ coin.nominal }} X {{ coin.amount }} </button> {% endfor %} </div>';
    this.preview = document.getElementById('buyer');
    content = swig.render(template, {
      locals: {
        buyer: this
      }
    });
    this.preview.innerHTML = content;
    coins = this.preview.querySelectorAll('.coin');
    results = [];
    for (i = 0, len = coins.length; i < len; i++) {
      coin = coins[i];
      results.push(coin.addEventListener('click', function() {
        var data;
        data = base.ask('PUT', '/vms/' + base.vm.id + '/buyer/' + base.buyer.id + '/add/' + this.dataset.value);
        if (data) {
          base.get_vm(base.vm.id);
          base.get_buyer(base.buyer.id);
        }
        console.log(this);
        return console.log(vm);
      }));
    }
    return results;
  };

  return Buyer;

})();

base = new BaseManager;
